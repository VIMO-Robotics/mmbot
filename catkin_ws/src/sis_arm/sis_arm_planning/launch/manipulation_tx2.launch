<?xml version="1.0" ?>
<launch>
  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find sis_arm_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>
  
  <arg name="use_gui" default="false" />
  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="$(arg use_gui)"/>
    <!-- <rosparam param="/source_list">[/virtual_joint_states]</rosparam> -->
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <include file="$(find sis_arm_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <!--<include file="$(find pc_perception)/launch/cylinder_detection.launch"/>-->

  <node name="virtual_joint_pub" pkg="sis_arm_planning" type="virtual_joint_pub.py" respawn="true" output="screen" />
  <node name="virtual_command_pub" pkg="sis_arm_planning" type="virtual_command_pub.py" respawn="true" output="screen" />

</launch>
